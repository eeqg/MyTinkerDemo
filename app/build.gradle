apply plugin: 'com.android.application'
//#tinker
//apply from: 'tinker.gradle'
apply plugin: 'com.tencent.tinker.patch'

android {
	compileSdkVersion 26
	buildToolsVersion '26.0.2'
	
	signingConfigs {
		release {
			try {
				storeFile file("../keystore/release.keystore")
				storePassword "testres"
				keyAlias "testres"
				keyPassword "testres"
			} catch (ex) {
				throw new InvalidUserDataException(ex.toString())
			}
		}
	}
	
	defaultConfig {
		applicationId "com.example.az.mytinkerdemo"
		minSdkVersion 15
		targetSdkVersion 26
		versionCode 1
		versionName "1.0"
		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
		
		buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
		buildConfigField "String", "PLATFORM", "\"all\""
	}
	
	buildTypes {
		release {
			minifyEnabled true//#tinker
			signingConfig signingConfigs.release
			proguardFiles getDefaultProguardFile('proguard-android.txt'), project.file('proguard-rules.pro')
		}
		debug {
			debuggable true
			minifyEnabled false//#tinker
			signingConfig signingConfigs.release
		}
	}
	
//	productFlavors {
//		flavorDevelop {
//			buildConfigField("String", "URL", "\"http://192.168.1.130:8086/cloudjn/custApi/cust!\"")
//		}
//		flavorPrepare {
//			buildConfigField("String", "URL", "\"http://39.108.0.46:18080/custApi/cust!\"")
//		}
//		flavorProduct {
//			buildConfigField("String", "URL", "\"https://www.zhuzhuone.com/custApi/cust!\"")
//		}
//	}
}

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation 'com.android.support:appcompat-v7:26.1.0'
	implementation 'com.android.support:support-annotations:27.1.1'
	implementation 'com.android.support.constraint:constraint-layout:1.1.0'
	testImplementation 'junit:junit:4.12'
	androidTestImplementation 'com.android.support.test:runner:1.0.2'
	androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
	
	//#tinker
	implementation("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
	annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
	compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
}

//#tinker
def bakPath = file("${buildDir}/bakApk/")
ext {
	tinkerEnabled = true
	
	//for normal build
	//old apk file to build patch apk
	tinkerOldApkPath = "${bakPath}/app-debug-0605-16-36-57.apk"
	//proguard mapping file to build patch apk
	tinkerApplyMappingPath = "${bakPath}/"
	//resource R.txt to build patch apk, must input if there is resource changed
	tinkerApplyResourcePath = "${bakPath}/app-debug-0605-16-36-57-R.txt"
	
	//only use for build all flavor, if not, just ignore this field
	tinkerBuildFlavorDirectory = "${bakPath}/"
}

def getOldApkPath() {
	return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
	return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
	return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
	return hasProperty("TINKER_ID") ? TINKER_ID : "v1.0"
}

def buildWithTinker() {
	return hasProperty("TINKER_ENABLE") ? Boolean.parseBoolean(TINKER_ENABLE) : ext.tinkerEnabled
}

if (buildWithTinker()) {
	apply plugin: 'com.tencent.tinker.patch'
	
	tinkerPatch {
		oldApk = getOldApkPath()
		ignoreWarning = false
		useSign = true
		tinkerEnable = buildWithTinker()
		buildConfig {
			applyMapping = getApplyMappingPath()
			applyResourceMapping = getApplyResourceMappingPath()
			
			tinkerId = getTinkerIdValue()
			
			keepDexApply = false
			isProtectedApp = false
			supportHotplugComponent = false
		}
		
		dex {
			dexMode = "jar"
			pattern = ["classes*.dex",
			           "assets/secondary-dex-?.jar"]
			loader = [
					//"tinker.sample.android.app.BaseBuildInfo"
			]
		}
		
		lib {
			pattern = ["lib/*/*.so"]
		}
		
		res {
			pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
			ignoreChange = ["assets/sample_meta.txt"]
			largeModSize = 100
		}
		
		packageConfig {
			configField("patchMessage", "tinker is sample to use")
			configField("platform", "all")
			configField("patchVersion", "1.0")
		}
		
		sevenZip {
			zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
		}
	}
	
	List<String> flavors = new ArrayList<>();
	project.android.productFlavors.each { flavor ->
		flavors.add(flavor.name)
	}
	boolean hasFlavors = flavors.size() > 0
	def date = new Date().format("MMdd-HH-mm-ss")
	
	/**
	 * bak apk and mapping
	 */
	android.applicationVariants.all { variant ->
		/**
		 * task type, you want to bak
		 */
		def taskName = variant.name
		
		tasks.all {
			if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
				
				it.doLast {
					copy {
						def fileNamePrefix = "${project.name}-${variant.baseName}"
						def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"
						
						def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
						from variant.outputs.first().outputFile
						into destPath
						rename { String fileName ->
							fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
						}
						
						from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
						into destPath
						rename { String fileName ->
							fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
						}
						
						from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
						into destPath
						rename { String fileName ->
							fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
						}
					}
				}
			}
		}
	}
	project.afterEvaluate {
		//sample use for build all flavor for one time
		if (hasFlavors) {
			task(tinkerPatchAllFlavorRelease) {
				group = 'tinker'
				def originOldPath = getTinkerBuildFlavorDirectory()
				for (String flavor : flavors) {
					def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
					dependsOn tinkerTask
					def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
					preAssembleTask.doFirst {
						String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
						project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
						project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
						project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"
					}
				}
			}
			
			task(tinkerPatchAllFlavorDebug) {
				group = 'tinker'
				def originOldPath = getTinkerBuildFlavorDirectory()
				for (String flavor : flavors) {
					def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
					dependsOn tinkerTask
					def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
					preAssembleTask.doFirst {
						String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
						project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
						project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
						project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
					}
				}
			}
		}
	}
}

